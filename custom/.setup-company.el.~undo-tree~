(undo-tree-save-format-version . 1)
"e9edcbf489a4eaaa4b15f25b40de5b87cfbf9ce7"
[nil nil nil nil (26015 53201 814899 301000) 0 nil]
([nil nil ((1 . 5) (t . -1)) nil (26015 53201 814898 565000) 0 nil])
([nil nil ((5 . 7)) nil (26015 53201 814897 980000) 0 nil])
([nil nil ((#("（" 0 1 (ws-butler-chg chg fontified nil)) . -5) (undo-tree-id46 . -1) (#("）" 0 1 (ws-butler-chg chg fontified t)) . 6)) nil (26015 53201 814897 457000) 0 nil])
([nil nil ((6 . 8) (5 . 7)) nil (26015 53201 814896 578000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg chg fontified t)) . -7) (undo-tree-id45 . -1) 8) nil (26015 53201 814895 880000) 0 nil])
([nil nil ((7 . 18)) nil (26015 53201 814895 14000) 0 nil])
([nil nil ((18 . 19)) nil (26015 53201 814894 484000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-constant-face ws-butler-chg chg fontified t)) . -15) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("o" 0 1 (face font-lock-constant-face ws-butler-chg chg fontified t)) . -16) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("m" 0 1 (face font-lock-constant-face ws-butler-chg chg fontified t)) . -17) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("p" 0 1 (face font-lock-constant-face ws-butler-chg chg fontified t)) . -18) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 19) nil (26015 53201 814893 212000) 0 nil])
([nil nil ((15 . 28)) nil (26015 53201 814884 40000) 0 nil])
([nil nil ((2 . 12) (1 . 3)) nil (26015 53201 814883 690000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -11) (undo-tree-id18 . -1) 12) nil (26015 53201 814883 47000) 0 nil])
([nil nil ((11 . 18)) nil (26015 53201 814882 20000) 0 nil])
([nil nil ((19 . 20)) nil (26015 53201 814881 573000) 0 nil])
([nil nil ((21 . 24) (20 . 22)) nil (26015 53201 814881 122000) 0 nil])
([nil nil ((24 . 45)) nil (26015 53201 814879 993000) 0 nil])
([nil nil ((45 . 50)) nil (26015 53201 814879 602000) 0 nil])
([nil nil ((50 . 61)) nil (26015 53201 814879 118000) 0 nil])
([nil nil ((48 . 67) (#("global-compan" 0 13 (ws-butler-chg chg fontified t)) . -48) (undo-tree-id0 . -13) (undo-tree-id1 . -3) (undo-tree-id2 . -4) (undo-tree-id3 . -5) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -7) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -9) (undo-tree-id12 . -10) (undo-tree-id13 . -11) (undo-tree-id14 . -12) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) 61) nil (26015 53201 814877 291000) 0 nil])
([nil nil ((96 . 97) 68) nil (26015 53201 814857 664000) 0 nil])
([nil nil ((nil rear-nonsticky nil 102 . 103) (nil fontified nil 70 . 103) (70 . 103) (t 26015 53201 819697 16000)) nil (26015 53770 822942 785000) 0 nil])
([nil nil ((103 . 104)) nil (26015 53770 822941 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 261 . 262) (nil fontified nil 104 . 262) (104 . 262)) nil (26015 53770 822941 390000) 0 nil])
([nil nil ((#("/home/wt/Qt/6.6.1/gcc_64/include/
" 0 32 (fontified t ws-butler-chg chg) 32 33 (rear-nonsticky t fontified t ws-butler-chg chg) 33 34 (ws-butler-chg chg fontified t)) . 70) (undo-tree-id7 . -34) (undo-tree-id8 . -33) (undo-tree-id9 . -33) (undo-tree-id10 . -33) (undo-tree-id11 . -33) (undo-tree-id12 . -33) (undo-tree-id13 . -33) (undo-tree-id14 . -33) (undo-tree-id15 . -34) (undo-tree-id16 . -34)) nil (26015 53770 822939 931000) 0 nil])
([nil nil ((107 . 145)) nil (26015 53770 822935 877000) 0 nil])
([nil nil ((108 . 146) (#("                                     " 0 37 (fontified t ws-butler-chg chg)) . 108) (undo-tree-id6 . -37) 145) nil (26015 53770 822935 370000) 0 nil])
([nil nil ((108 . 145)) nil (26015 53770 822934 212000) 0 nil])
([nil nil ((nil rear-nonsticky nil 178 . 179) (nil fontified nil 178 . 179) (nil fontified nil 177 . 178) (nil fontified nil 145 . 177) (145 . 179)) nil (26015 53770 822933 523000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t ws-butler-chg chg)) . -178) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 179) nil (26015 53770 822931 848000) 0 nil])
([nil nil ((145 . 147)) nil (26015 53770 822930 493000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t rear-nonsticky t ws-butler-chg chg)) . -179) (undo-tree-id3 . -1) 180) nil (26015 53770 822929 953000) 0 nil])
([nil nil ((179 . 180)) nil (26015 53770 822928 797000) 0 nil])
([nil nil ((#("“" 0 1 (face font-lock-warning-face help-echo "Confusable character" fontified t ws-butler-chg chg)) . -145) (undo-tree-id1 . -1) (#("”" 0 1 (face font-lock-warning-face help-echo "Confusable character" fontified t ws-butler-chg chg)) . -146) (undo-tree-id2 . -1) 147) nil (26015 53770 822927 922000) 0 nil])
([nil nil ((145 . 147) (#("\"" 0 1 (fontified nil ws-butler-chg chg)) . -145) (145 . 146)) nil (26015 53770 822925 108000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -146) (undo-tree-id0 . -1) 147) nil (26015 53770 823013 817000) 0 nil])
([nil nil ((#("\"
                                     " 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg delete face font-lock-string-face fontified nil) 2 39 (face font-lock-string-face fontified t ws-butler-chg chg)) . -179) (179 . 180) (#("\"" 0 1 (face font-lock-string-face fontified nil ws-butler-chg chg)) . -179) (179 . 180)) nil (26015 53779 948219 597000) 0 nil] [nil nil ((#("\"
                                     " 0 1 (ws-butler-chg chg fontified nil) 1 2 (face font-lock-string-face fontified nil ws-butler-chg delete) 2 39 (fontified t ws-butler-chg chg)) . -179) (179 . 180) (#("\"" 0 1 (face font-lock-string-face fontified nil ws-butler-chg chg)) . -179) (179 . 180)) ((#("\"" 0 1 (face font-lock-string-face fontified nil ws-butler-chg chg)) . 179) (nil ws-butler-chg delete 180 . 181) (179 . 180) (#("\"" 0 1 (ws-butler-chg chg fontified nil)) . 179) (nil ws-butler-chg delete 218 . 219) (179 . 218)) (26015 53770 822911 145000) 0 nil])
([nil nil ((180 . 218)) nil (26015 53779 948268 228000) 0 nil])
nil
([nil nil ((#("-I/home/<user>/project_root/include1/\"" 0 37 (fontified t ws-butler-chg chg) 37 38 (face font-lock-string-face fontified t ws-butler-chg chg)) . 218) (undo-tree-id96 . -38)) nil (26015 53803 45003 826000) 0 nil] [nil nil ((#("-I/home/<user>/project_root/include1/\"" 0 37 (fontified t ws-butler-chg chg) 37 38 (face font-lock-string-face fontified t ws-butler-chg chg)) . 218) (undo-tree-id17 . -38)) ((nil ws-butler-chg delete 256 . 257) (218 . 256)) (26015 53779 948215 681000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -274) (undo-tree-id75 . -1) (#("j" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -275) (undo-tree-id76 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -276) (undo-tree-id77 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -277) (undo-tree-id78 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -278) (undo-tree-id79 . -1) (#("_" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -279) (undo-tree-id80 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -280) (undo-tree-id81 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -281) (undo-tree-id82 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -282) (undo-tree-id83 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -283) (undo-tree-id84 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -284) (undo-tree-id85 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -285) (undo-tree-id86 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -286) (undo-tree-id87 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -287) (undo-tree-id88 . -1) (#("l" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -288) (undo-tree-id89 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -289) (undo-tree-id90 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -290) (undo-tree-id91 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -291) (undo-tree-id92 . -1) (#("2" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -292) (undo-tree-id93 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -293) (undo-tree-id94 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -294) (undo-tree-id95 . -1) 295) nil (26015 53803 45000 710000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -253) (undo-tree-id54 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -254) (undo-tree-id55 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -255) (undo-tree-id56 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -256) (undo-tree-id57 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -257) (undo-tree-id58 . -1) (#("I" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -258) (undo-tree-id59 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -259) (undo-tree-id60 . -1) (#("h" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -260) (undo-tree-id61 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -261) (undo-tree-id62 . -1) (#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -262) (undo-tree-id63 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -263) (undo-tree-id64 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -264) (undo-tree-id65 . -1) (#("<" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -265) (undo-tree-id66 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -266) (undo-tree-id67 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -267) (undo-tree-id68 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -268) (undo-tree-id69 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -269) (undo-tree-id70 . -1) (#(">" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -270) (undo-tree-id71 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -271) (undo-tree-id72 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -272) (undo-tree-id73 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -273) (undo-tree-id74 . -1) 274) nil (26015 53803 44989 830000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -232) (undo-tree-id33 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -233) (undo-tree-id34 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -234) (undo-tree-id35 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -235) (undo-tree-id36 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -236) (undo-tree-id37 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -237) (undo-tree-id38 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -238) (undo-tree-id39 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -239) (undo-tree-id40 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -240) (undo-tree-id41 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -241) (undo-tree-id42 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -242) (undo-tree-id43 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -243) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -244) (undo-tree-id45 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -245) (undo-tree-id46 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -246) (undo-tree-id47 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -247) (undo-tree-id48 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -248) (undo-tree-id49 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -249) (undo-tree-id50 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -250) (undo-tree-id51 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -251) (undo-tree-id52 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -252) (undo-tree-id53 . -1) 253) nil (26015 53803 44979 751000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . -218) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -219) (undo-tree-id20 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -220) (undo-tree-id21 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -221) (undo-tree-id22 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -222) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -223) (undo-tree-id24 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -224) (undo-tree-id25 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -225) (undo-tree-id26 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -226) (undo-tree-id27 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -227) (undo-tree-id28 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -228) (undo-tree-id29 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -229) (undo-tree-id30 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -230) (undo-tree-id31 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -231) (undo-tree-id32 . -1) 232) nil (26015 53803 44967 967000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -76) (undo-tree-id1 . -1) 77 (t 26015 53803 49682 0)) nil (26015 53866 149588 409000) 0 nil])
([nil nil ((76 . 77)) nil (26015 53866 149586 924000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -104) (undo-tree-id0 . -1) 105) nil (26015 53866 149585 338000) 0 nil])
([nil nil ((104 . 105)) nil (26015 53866 149573 164000) 0 nil])
([nil nil ((70 . 72) (t 26015 53866 153013 744000)) nil (26015 53981 14898 338000) 0 nil])
([nil nil ((72 . 73)) nil (26015 53981 14897 369000) 0 nil])
([nil nil ((#("((nil . ((company-clang-arguments . (
                                     \"/home/wt/Qt/6.6.1/gcc_64/include/\"
                                     )))))
" 0 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 38 (fontified t) 38 75 (fontified t) 75 110 (face font-lock-string-face fontified t) 110 154 (fontified t)) . 73) (undo-tree-id2 . -153) (undo-tree-id3 . -153) (undo-tree-id4 . -153) (undo-tree-id5 . -107) (undo-tree-id6 . -154) (undo-tree-id7 . -153) 227) nil (26015 53981 14894 644000) 0 nil])
([nil nil ((nil rear-nonsticky nil 118 . 119) (nil fontified nil 69 . 119) (69 . 119) (t 26015 53981 16344 218000)) nil (26015 55431 851401 761000) 0 nil])
([nil nil ((nil rear-nonsticky nil 187 . 188) (nil fontified nil 120 . 188) (120 . 188) (t 26015 55431 852974 742000)) nil (26015 55511 608318 23000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -177) (undo-tree-id273 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -178) (undo-tree-id274 . -1) (#("+" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -179) (undo-tree-id275 . -1) (#("+" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -180) (undo-tree-id276 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -181) (undo-tree-id277 . -1) (#("4" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -182) (undo-tree-id278 . -1) (#("." 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -183) (undo-tree-id279 . -1) (#("8" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -184) (undo-tree-id280 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -185) (undo-tree-id281 . -1) 186) nil (26015 55648 700089 949000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -165) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -166) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -167) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -168) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -169) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -170) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -171) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -172) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (#("l" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -173) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -174) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -175) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -176) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) 177) nil (26015 55670 444852 446000) 0 nil] [nil nil ((177 . 178)) ((#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . 177) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1)) (26015 55647 933645 371000) 0 nil])
([nil nil ((165 . 169)) nil (26015 55692 832105 15000) 0 nil] [nil nil ((nil rear-nonsticky nil 232 . 233) (nil fontified nil 165 . 233) (165 . 233)) ((#("(add-to-list 'company-c-headers-path-system \"/usr/include/c++/4.8/\")" 0 45 (face font-lock-string-face fontified nil ws-butler-chg chg) 45 66 (fontified nil ws-butler-chg chg) 66 67 (face font-lock-string-face fontified nil ws-butler-chg chg) 67 68 (face font-lock-string-face rear-nonsticky nil fontified nil ws-butler-chg chg)) . 165) (undo-tree-id1560 . -68) (undo-tree-id1561 . -68) (undo-tree-id1562 . -68) (undo-tree-id1563 . -68) (undo-tree-id1564 . -67) (undo-tree-id1565 . -67) (undo-tree-id1566 . -67) (undo-tree-id1567 . -67) (undo-tree-id1568 . -68) (undo-tree-id1569 . -68) (nil rear-nonsticky t 232 . 233)) (26015 55669 4879 952000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -165) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id3 . -1) (undo-tree-id5 . -1) (undo-tree-id7 . -1) (undo-tree-id9 . -1) (undo-tree-id11 . -1) (undo-tree-id13 . -1) (undo-tree-id15 . -1) (undo-tree-id17 . -1) (undo-tree-id19 . -1) (undo-tree-id21 . -1) (undo-tree-id23 . -1) (undo-tree-id25 . -1) (undo-tree-id27 . -1) (undo-tree-id29 . -1) (undo-tree-id31 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -166) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id36 . -1) (undo-tree-id38 . -1) (undo-tree-id40 . -1) (undo-tree-id42 . -1) (undo-tree-id44 . -1) (undo-tree-id46 . -1) (undo-tree-id48 . -1) (undo-tree-id50 . -1) (undo-tree-id52 . -1) (undo-tree-id54 . -1) (undo-tree-id56 . -1) (undo-tree-id58 . -1) (undo-tree-id60 . -1) (undo-tree-id62 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -167) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id67 . -1) (undo-tree-id69 . -1) (undo-tree-id71 . -1) (undo-tree-id73 . -1) (undo-tree-id75 . -1) (undo-tree-id77 . -1) (undo-tree-id79 . -1) (undo-tree-id81 . -1) (undo-tree-id83 . -1) (undo-tree-id85 . -1) (undo-tree-id87 . -1) (undo-tree-id89 . -1) (undo-tree-id91 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -168) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id96 . -1) (undo-tree-id98 . -1) (undo-tree-id100 . -1) (undo-tree-id102 . -1) (undo-tree-id104 . -1) (undo-tree-id106 . -1) (undo-tree-id108 . -1) (undo-tree-id110 . -1) (undo-tree-id112 . -1) (undo-tree-id114 . -1) (undo-tree-id116 . -1) (undo-tree-id118 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -169) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id123 . -1) (undo-tree-id125 . -1) (undo-tree-id127 . -1) (undo-tree-id129 . -1) (undo-tree-id131 . -1) (undo-tree-id133 . -1) (undo-tree-id135 . -1) (undo-tree-id137 . -1) (undo-tree-id139 . -1) (undo-tree-id141 . -1) (undo-tree-id143 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -170) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id148 . -1) (undo-tree-id150 . -1) (undo-tree-id152 . -1) (undo-tree-id154 . -1) (undo-tree-id156 . -1) (undo-tree-id158 . -1) (undo-tree-id160 . -1) (undo-tree-id162 . -1) (undo-tree-id164 . -1) (undo-tree-id166 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -171) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (undo-tree-id177 . -1) (undo-tree-id179 . -1) (undo-tree-id181 . -1) (undo-tree-id183 . -1) (undo-tree-id185 . -1) (undo-tree-id187 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -172) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id192 . -1) (undo-tree-id194 . -1) (undo-tree-id196 . -1) (undo-tree-id198 . -1) (undo-tree-id200 . -1) (undo-tree-id202 . -1) (undo-tree-id204 . -1) (undo-tree-id206 . -1) (#("l" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -173) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id211 . -1) (undo-tree-id213 . -1) (undo-tree-id215 . -1) (undo-tree-id217 . -1) (undo-tree-id219 . -1) (undo-tree-id221 . -1) (undo-tree-id223 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -174) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id228 . -1) (undo-tree-id230 . -1) (undo-tree-id232 . -1) (undo-tree-id234 . -1) (undo-tree-id236 . -1) (undo-tree-id238 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -175) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id243 . -1) (undo-tree-id245 . -1) (undo-tree-id247 . -1) (undo-tree-id249 . -1) (undo-tree-id251 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -176) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id256 . -1) (undo-tree-id258 . -1) (undo-tree-id260 . -1) (undo-tree-id262 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -177) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id267 . -1) (undo-tree-id269 . -1) (undo-tree-id271 . -1) 178) ((166 . 178) (nil ws-butler-chg delete 166 . 167) (165 . 166)) (26015 55647 756631 83000) 0 nil])
([nil nil ((166 . 170) (#("usr" 0 3 (face font-lock-string-face fontified t ws-butler-chg chg)) . -166) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -2) (undo-tree-id1608 . -2) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) 169) nil (26015 55692 832104 36000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face rear-nonsticky t fontified t ws-butler-chg chg)) . -232) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) 233) ((nil ws-butler-chg delete 233 . 234) (232 . 233)) (26015 55668 880716 758000) 0 nil])
([nil nil ((nil rear-nonsticky nil 232 . 233) (nil fontified nil 165 . 233) (165 . 233)) ((#("(add-to-list 'company-c-headers-path-system \"/usr/include/c++/4.8/\")" 0 16 (face font-lock-string-face fontified nil ws-butler-chg chg) 16 17 (face font-lock-string-face fontified nil ws-butler-chg chg) 17 18 (face font-lock-string-face fontified nil ws-butler-chg chg) 18 19 (face font-lock-string-face fontified nil ws-butler-chg chg) 19 20 (face font-lock-string-face fontified nil ws-butler-chg chg) 20 21 (face font-lock-string-face fontified nil ws-butler-chg chg) 21 22 (face font-lock-string-face fontified nil ws-butler-chg chg) 22 23 (face font-lock-string-face fontified nil ws-butler-chg chg) 23 24 (face font-lock-string-face fontified nil ws-butler-chg chg) 24 25 (face font-lock-string-face fontified nil ws-butler-chg chg) 25 26 (face font-lock-string-face fontified nil ws-butler-chg chg) 26 27 (face font-lock-string-face fontified nil ws-butler-chg chg) 27 28 (face font-lock-string-face fontified nil ws-butler-chg chg) 28 29 (face font-lock-string-face fontified nil ws-butler-chg chg) 29 30 (face font-lock-string-face fontified nil ws-butler-chg chg) 30 31 (face font-lock-string-face fontified nil ws-butler-chg chg) 31 32 (face font-lock-string-face fontified nil ws-butler-chg chg) 32 33 (face font-lock-string-face fontified nil ws-butler-chg chg) 33 34 (face font-lock-string-face fontified nil ws-butler-chg chg) 34 35 (face font-lock-string-face fontified nil ws-butler-chg chg) 35 36 (face font-lock-string-face fontified nil ws-butler-chg chg) 36 37 (face font-lock-string-face fontified nil ws-butler-chg chg) 37 38 (face font-lock-string-face fontified nil ws-butler-chg chg) 38 39 (face font-lock-string-face fontified nil ws-butler-chg chg) 39 40 (face font-lock-string-face fontified nil ws-butler-chg chg) 40 41 (face font-lock-string-face fontified nil ws-butler-chg chg) 41 42 (face font-lock-string-face fontified nil ws-butler-chg chg) 42 43 (face font-lock-string-face fontified nil ws-butler-chg chg) 43 44 (face font-lock-string-face fontified nil) 44 45 (face font-lock-string-face fontified nil ws-butler-chg chg) 45 66 (fontified nil ws-butler-chg chg) 66 67 (face font-lock-string-face fontified nil ws-butler-chg chg) 67 68 (face font-lock-string-face rear-nonsticky nil fontified nil ws-butler-chg chg)) . 165) (undo-tree-id1256 . -43) (undo-tree-id1257 . -43) (undo-tree-id1258 . -43) (undo-tree-id1259 . -43) (undo-tree-id1260 . -43) (undo-tree-id1261 . -43) (undo-tree-id1262 . -43) (undo-tree-id1263 . -43) (undo-tree-id1264 . -43) (undo-tree-id1265 . -43) (undo-tree-id1266 . -42) (undo-tree-id1267 . -42) (undo-tree-id1268 . -41) (undo-tree-id1269 . -41) (undo-tree-id1270 . -40) (undo-tree-id1271 . -40) (undo-tree-id1272 . -39) (undo-tree-id1273 . -39) (undo-tree-id1274 . -38) (undo-tree-id1275 . -38) (undo-tree-id1276 . -37) (undo-tree-id1277 . -37) (undo-tree-id1278 . -36) (undo-tree-id1279 . -36) (undo-tree-id1280 . -35) (undo-tree-id1281 . -35) (undo-tree-id1282 . -34) (undo-tree-id1283 . -34) (undo-tree-id1284 . -33) (undo-tree-id1285 . -33) (undo-tree-id1286 . -32) (undo-tree-id1287 . -32) (undo-tree-id1288 . -31) (undo-tree-id1289 . -31) (undo-tree-id1290 . -30) (undo-tree-id1291 . -30) (undo-tree-id1292 . -29) (undo-tree-id1293 . -29) (undo-tree-id1294 . -28) (undo-tree-id1295 . -28) (undo-tree-id1296 . -27) (undo-tree-id1297 . -27) (undo-tree-id1298 . -26) (undo-tree-id1299 . -26) (undo-tree-id1300 . -25) (undo-tree-id1301 . -25) (undo-tree-id1302 . -24) (undo-tree-id1303 . -24) (undo-tree-id1304 . -23) (undo-tree-id1305 . -23) (undo-tree-id1306 . -22) (undo-tree-id1307 . -22) (undo-tree-id1308 . -21) (undo-tree-id1309 . -21) (undo-tree-id1310 . -20) (undo-tree-id1311 . -20) (undo-tree-id1312 . -19) (undo-tree-id1313 . -19) (undo-tree-id1314 . -18) (undo-tree-id1315 . -18) (undo-tree-id1316 . -17) (undo-tree-id1317 . -17) (undo-tree-id1318 . -22) (undo-tree-id1319 . -22) (undo-tree-id1320 . -43) (undo-tree-id1321 . -43) (undo-tree-id1322 . -43) (undo-tree-id1323 . -43) (undo-tree-id1324 . -43) (undo-tree-id1325 . -43) (undo-tree-id1326 . -43) (undo-tree-id1327 . -43) (undo-tree-id1328 . -43) (undo-tree-id1329 . -43) (undo-tree-id1330 . -43) (undo-tree-id1331 . -43) (undo-tree-id1332 . -43) (undo-tree-id1333 . -43) (undo-tree-id1334 . -43) (undo-tree-id1335 . -43) (undo-tree-id1336 . -43) (undo-tree-id1337 . -43) (undo-tree-id1338 . -43) (undo-tree-id1339 . -43) (nil rear-nonsticky t 232 . 233)) (26015 55623 822893 322000) 0 nil] [nil nil ((nil rear-nonsticky nil 232 . 233) (nil fontified nil 165 . 233) (165 . 233)) ((#("(add-to-list 'company-c-headers-path-system \"/usr/include/c++/4.8/\")" 0 45 (face font-lock-string-face fontified nil ws-butler-chg chg) 45 66 (fontified nil ws-butler-chg chg) 66 67 (face font-lock-string-face fontified nil ws-butler-chg chg) 67 68 (face font-lock-string-face rear-nonsticky nil fontified nil ws-butler-chg chg)) . 165) (undo-tree-id282 . -68) (undo-tree-id283 . -68) (nil rear-nonsticky t 232 . 233)) (26015 55511 607674 485000) 0 nil])
([nil nil ((170 . 175)) nil (26015 55692 832098 752000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified nil ws-butler-chg chg)) . -231) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("\"" 0 1 (face font-lock-string-face ws-butler-chg delete fontified t)) . 232) (undo-tree-id1351 . -1)) ((232 . 233) (nil ws-butler-chg delete 232 . 233) (231 . 232)) (26015 55668 880429 571000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -187) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -188) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("h" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -189) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -190) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("a" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -191) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -192) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -193) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -194) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -195) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -196) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -197) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("a" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -198) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -199) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("h" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -200) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -201) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -202) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("y" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -203) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -204) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -205) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -206) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -207) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) 208) ((187 . 208)) (26015 55622 600385 61000) 0 nil])
nil
([nil nil ((166 . 178) (#("usr/inclu" 0 9 (face font-lock-string-face ws-butler-chg chg fontified t)) . -166) (undo-tree-id1590 . -9) (undo-tree-id1591 . -4) (undo-tree-id1592 . -4) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) (undo-tree-id1595 . -6) (undo-tree-id1596 . -6) (undo-tree-id1597 . -7) (undo-tree-id1598 . -7) (undo-tree-id1599 . -8) (undo-tree-id1600 . -8) (undo-tree-id1601 . -9) (undo-tree-id1602 . -9) (undo-tree-id1603 . -9) (undo-tree-id1604 . -9) 175) nil (26015 55692 832097 521000) 0 nil])
nil
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -181) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -182) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("a" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -183) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -184) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("y" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -185) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -186) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) 187) ((182 . 187) (nil ws-butler-chg delete 182 . 183) (181 . 182)) (26015 55622 599911 769000) 0 nil])
([nil nil ((178 . 179)) nil (26015 55692 831164 227000) 0 nil])
nil
([nil nil ((179 . 180)) nil (26015 55692 831163 97000) 0 nil])
([nil nil ((166 . 182) (#("usr/include/c+" 0 14 (face font-lock-string-face ws-butler-chg chg fontified t)) . -166) (undo-tree-id1575 . -14) (undo-tree-id1576 . -12) (undo-tree-id1577 . -12) (undo-tree-id1578 . -13) (undo-tree-id1579 . -13) (undo-tree-id1580 . -13) (undo-tree-id1581 . -13) (undo-tree-id1582 . -13) (undo-tree-id1583 . -13) (undo-tree-id1584 . -13) (undo-tree-id1585 . -13) (undo-tree-id1586 . -14) (undo-tree-id1587 . -14) (undo-tree-id1588 . -14) (undo-tree-id1589 . -14) 180) nil (26015 55692 831161 709000) 0 nil])
([nil nil ((166 . 189) (#("usr/include/c++/" 0 16 (face font-lock-string-face ws-butler-chg chg fontified t)) . -166) (undo-tree-id1570 . -16) (undo-tree-id1571 . -16) (undo-tree-id1572 . -16) (undo-tree-id1573 . -16) (undo-tree-id1574 . -16) 182) nil (26015 55692 831151 437000) 0 nil])
([nil nil ((#("(add-to-list 'company-c-headers-path-system \"/usr/include/c++/13.2.1/\")
" 0 44 (fontified t) 44 46 (face font-lock-string-face fontified t) 46 69 (face font-lock-string-face fontified t) 69 70 (face font-lock-string-face fontified t) 70 71 (rear-nonsticky t fontified t) 71 72 (fontified t)) . 120) (undo-tree-id1615 . -45) (undo-tree-id1616 . -71) (undo-tree-id1617 . -71) (undo-tree-id1618 . -45) (undo-tree-id1619 . -45) (undo-tree-id1620 . -45) (undo-tree-id1621 . -45) (undo-tree-id1622 . -72) (undo-tree-id1623 . -71) (undo-tree-id1624 . -70) (undo-tree-id1625 . -45) (undo-tree-id1626 . -45) (undo-tree-id1627 . -45) (undo-tree-id1628 . -45) (undo-tree-id1629 . -45) (undo-tree-id1630 . -46) (undo-tree-id1631 . -46) (undo-tree-id1632 . -46) (undo-tree-id1633 . -46) (undo-tree-id1634 . -46) (undo-tree-id1635 . -46) (undo-tree-id1636 . -69) (undo-tree-id1637 . -46) (undo-tree-id1638 . -46) (undo-tree-id1639 . -46) (undo-tree-id1640 . -46) (undo-tree-id1641 . -46) (undo-tree-id1642 . -46) (undo-tree-id1643 . -46) (undo-tree-id1644 . -46) (undo-tree-id1645 . -46) (undo-tree-id1646 . -46) (undo-tree-id1647 . -46) (undo-tree-id1648 . -46) (undo-tree-id1649 . -46) (undo-tree-id1650 . -46) (undo-tree-id1651 . -46) (undo-tree-id1652 . -46) (undo-tree-id1653 . -46) (undo-tree-id1654 . -46) (undo-tree-id1655 . -46) (undo-tree-id1656 . -46) (undo-tree-id1657 . -46) (undo-tree-id1658 . -46) (undo-tree-id1659 . -46) (undo-tree-id1660 . -46) (undo-tree-id1661 . -46) (undo-tree-id1662 . -46) (undo-tree-id1663 . -46) (undo-tree-id1664 . -69) (undo-tree-id1665 . -69) (undo-tree-id1666 . -71) (undo-tree-id1667 . -72) (t 26015 55692 832968 257000)) nil (26015 55712 135537 522000) 0 nil])
([nil nil ((nil rear-nonsticky nil 191 . 192) (nil fontified nil 191 . 192) (nil fontified nil 190 . 191) (nil fontified nil 189 . 190) (nil fontified nil 166 . 189) (nil fontified nil 164 . 166) (nil fontified nil 120 . 164) (120 . 192)) nil (26015 55712 135509 780000) 0 nil])
([nil nil ((nil rear-nonsticky nil 263 . 264) (nil fontified nil 263 . 264) (nil fontified nil 262 . 263) (nil fontified nil 261 . 262) (nil fontified nil 238 . 261) (nil fontified nil 236 . 238) (nil fontified nil 192 . 236) (192 . 264)) nil (26015 55712 135505 841000) 0 nil])
([nil nil ((264 . 266) (t 26015 55712 136301 112000)) nil (26015 55775 763800 370000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -240) (undo-tree-id1671 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -241) (undo-tree-id1672 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -242) (undo-tree-id1673 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id1674 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -244) (undo-tree-id1675 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -245) (undo-tree-id1676 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -246) (undo-tree-id1677 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -247) (undo-tree-id1678 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -248) (undo-tree-id1679 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -249) (undo-tree-id1680 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -250) (undo-tree-id1681 . -1) (#("+" 0 1 (face font-lock-string-face fontified t)) . -251) (undo-tree-id1682 . -1) (#("+" 0 1 (face font-lock-string-face fontified t)) . -252) (undo-tree-id1683 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -253) (undo-tree-id1684 . -1) (#("1" 0 1 (face font-lock-string-face fontified t)) . -254) (undo-tree-id1685 . -1) (#("3" 0 1 (face font-lock-string-face fontified t)) . -255) (undo-tree-id1686 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -256) (undo-tree-id1687 . -1) (#("2" 0 1 (face font-lock-string-face fontified t)) . -257) (undo-tree-id1688 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -258) (undo-tree-id1689 . -1) (#("1" 0 1 (face font-lock-string-face fontified t)) . -259) (undo-tree-id1690 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -260) (undo-tree-id1691 . -1) 261) nil (26015 55775 763796 564000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -237) (undo-tree-id1668 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -238) (undo-tree-id1669 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -239) (undo-tree-id1670 . -1) 240) nil (26015 55775 763783 911000) 0 nil])
([nil nil ((nil rear-nonsticky nil 269 . 270) (nil fontified nil 237 . 270) (237 . 270)) nil (26015 55775 763772 987000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -272) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("(" 0 1 (fontified t)) . -273) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#(")" 0 1 (fontified t)) . -274) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 275 (t 26015 55775 762966 197000)) nil (26015 56133 888455 683000) 0 nil])
([nil nil ((192 . 193)) nil (26015 56133 888435 4000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -192) (undo-tree-id0 . -1) 193 (t 26015 56133 892957 227000)) nil (26015 56145 125637 424000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -261) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -262) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -263) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -264) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -265) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -266) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -267) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -268) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -269) (undo-tree-id678 . -1) 270 (t 26015 56145 129623 611000)) nil (26015 56489 917667 145000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -248) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (#("6" 0 1 (face font-lock-string-face fontified t)) . -249) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -250) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#("6" 0 1 (face font-lock-string-face fontified t)) . -251) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -252) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#("1" 0 1 (face font-lock-string-face fontified t)) . -253) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -254) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -255) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -256) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -257) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -258) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#("6" 0 1 (face font-lock-string-face fontified t)) . -259) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("4" 0 1 (face font-lock-string-face fontified t)) . -260) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) 261) nil (26015 56489 917643 428000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -237) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -238) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -239) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -240) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -241) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -242) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -244) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -245) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#("Q" 0 1 (face font-lock-string-face fontified t)) . -246) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -247) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) 248) nil (26015 56489 917608 879000) 0 nil])
([nil nil ((237 . 242)) nil (26015 56489 917578 106000) 0 nil])
([nil nil ((#("/" 0 1 (ws-butler-chg chg fontified nil)) . -245) (238 . 246) (#("home" 0 4 (face font-lock-string-face ws-butler-chg chg fontified t)) . -238) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) 242) nil (26015 56489 917577 504000) 0 nil])
([nil nil ((245 . 246)) nil (26015 56489 917574 520000) 0 nil])
([nil nil ((246 . 247)) nil (26015 56489 917574 98000) 0 nil])
([nil nil ((#("q" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -246) (undo-tree-id414 . -1) 247) nil (26015 56489 917573 645000) 0 nil])
([nil nil ((246 . 247)) nil (26015 56489 917572 459000) 0 nil])
([nil nil ((247 . 248)) nil (26015 56489 917571 987000) 0 nil])
([nil nil ((248 . 249)) nil (26015 56489 917571 451000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -242) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("w" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -243) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("t" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -244) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -245) (undo-tree-id410 . -1) (#("Q" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -246) (undo-tree-id411 . -1) (#("T" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -247) (undo-tree-id412 . -1) (#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -248) (undo-tree-id413 . -1) 249) nil (26015 56489 917570 0) 0 nil])
([nil nil ((242 . 243)) nil (26015 56489 917564 786000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -237) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("h" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -238) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("o" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -239) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("m" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -240) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("e" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -241) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -242) (undo-tree-id400 . -1) 243) nil (26015 56489 917563 10000) 0 nil])
([nil nil ((237 . 242)) nil (26015 56489 917554 495000) 0 nil])
([nil nil ((238 . 243) (#("home" 0 4 (face font-lock-string-face ws-butler-chg chg fontified t)) . -238) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) 242) nil (26015 56489 917553 643000) 0 nil])
([nil nil ((#("/" 0 1 (ws-butler-chg chg fontified nil)) . -245) (238 . 246) (#("home/" 0 5 (face font-lock-string-face ws-butler-chg chg fontified t)) . -238) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -5) 243) nil (26015 56489 917549 810000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -237) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("h" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -238) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("o" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -239) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("m" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -240) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("e" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -241) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("/" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -242) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("w" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -243) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("t" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -244) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 245) nil (26015 56489 917537 271000) 0 nil])
([nil nil ((nil rear-nonsticky nil 269 . 270) (nil fontified nil 237 . 270) (237 . 270)) nil (26015 56489 917099 44000) 0 nil])
([nil nil ((120 . 122) (t 26015 56489 919614 976000)) nil (26015 56581 685405 30000) 0 nil])
([nil nil ((194 . 196)) nil (26015 56581 685401 646000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -120) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -121) (undo-tree-id2 . -1) 122 (t 26015 56581 689612 699000)) nil (26015 56588 662373 707000) 0 nil])
([nil nil ((119 . 122) (t 26015 56588 669612 524000)) nil (26015 56667 589807 449000) 0 nil])
([nil nil ((nil rear-nonsticky nil 153 . 154) (nil fontified nil 121 . 154) (121 . 154)) nil (26015 56667 589806 627000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t ws-butler-chg chg)) . -133) (undo-tree-id12 . -1) (#("." 0 1 (fontified t ws-butler-chg chg)) . -134) (undo-tree-id13 . -1) (#("6" 0 1 (fontified t ws-butler-chg chg)) . -135) (undo-tree-id14 . -1) (#("." 0 1 (fontified t ws-butler-chg chg)) . -136) (undo-tree-id15 . -1) (#("1" 0 1 (fontified t ws-butler-chg chg)) . -137) (undo-tree-id16 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -138) (undo-tree-id17 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -139) (undo-tree-id18 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -140) (undo-tree-id19 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -141) (undo-tree-id20 . -1) (#("_" 0 1 (fontified t ws-butler-chg chg)) . -142) (undo-tree-id21 . -1) (#("6" 0 1 (fontified t ws-butler-chg chg)) . -143) (undo-tree-id22 . -1) (#("4" 0 1 (fontified t ws-butler-chg chg)) . -144) (undo-tree-id23 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -145) (undo-tree-id24 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -146) (undo-tree-id25 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -147) (undo-tree-id26 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -148) (undo-tree-id27 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -149) (undo-tree-id28 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -150) (undo-tree-id29 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg)) . -151) (undo-tree-id30 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -152) (undo-tree-id31 . -1) (#("/" 0 1 (rear-nonsticky t fontified t ws-butler-chg chg)) . -153) (undo-tree-id32 . -1) 154) nil (26015 56667 589804 619000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t ws-butler-chg chg)) . -121) (undo-tree-id0 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -122) (undo-tree-id1 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -123) (undo-tree-id2 . -1) (#("m" 0 1 (fontified t ws-butler-chg chg)) . -124) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -125) (undo-tree-id4 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -126) (undo-tree-id5 . -1) (#("w" 0 1 (fontified t ws-butler-chg chg)) . -127) (undo-tree-id6 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -128) (undo-tree-id7 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -129) (undo-tree-id8 . -1) (#("Q" 0 1 (fontified t ws-butler-chg chg)) . -130) (undo-tree-id9 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -131) (undo-tree-id10 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -132) (undo-tree-id11 . -1) 133) nil (26015 56667 589793 855000) 0 nil])
([nil nil ((nil rear-nonsticky nil 291 . 292) (nil fontified nil 121 . 292) (121 . 292)) nil (26015 56667 589775 357000) 0 nil])
([nil nil ((365 . 366) (t 26015 56667 592943 864000)) nil (26015 56825 727960 235000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -367) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -368) (undo-tree-id4 . -1) 369 (t 26015 56825 732939 936000)) nil (26015 56853 605433 942000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -380) (undo-tree-id1 . -1) 381) nil (26015 56853 605431 382000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -307) (undo-tree-id0 . -1) 308) nil (26015 56853 605427 650000) 0 nil])
([nil nil ((1 . 3) (t 26015 56853 609605 913000)) nil (26015 56898 958260 946000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("
" 0 1 (ws-butler-chg chg fontified t)) . -2) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 3) nil (26015 56898 958259 876000) 0 nil])
([nil nil ((307 . 308)) nil (26015 56898 958257 26000) 0 nil])
([nil nil ((#("/" 0 1 (ws-butler-chg chg fontified t)) . -307) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 308) nil (26015 56898 958256 163000) 0 nil])
([nil nil ((307 . 308)) nil (26015 56898 958254 326000) 0 nil])
([nil nil ((380 . 381)) nil (26015 56996 36590 804000) 0 nil])
([nil nil ((294 . 295) (t 26015 57047 132934 492000)) nil (26015 57065 271887 335000) 0 nil] [nil nil ((367 . 368)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 367)) (26015 56995 509742 62000) 0 nil])
([nil nil ((368 . 369)) nil (26015 57065 271883 847000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -352) (#("+" 0 1 (face font-lock-string-face fontified t)) . -353) (#("+" 0 1 (face font-lock-string-face fontified t)) . -354) (#("/" 0 1 (face font-lock-string-face fontified t)) . -355) (#("1" 0 1 (face font-lock-string-face fontified t)) . -356) (#("3" 0 1 (face font-lock-string-face fontified t)) . -357) (#("." 0 1 (face font-lock-string-face fontified t)) . -358) (#("2" 0 1 (face font-lock-string-face fontified t)) . -359) (#("." 0 1 (face font-lock-string-face fontified t)) . -360) (#("1" 0 1 (face font-lock-string-face fontified t)) . -361) (#("/" 0 1 (face font-lock-string-face fontified t)) . -362) 363) ((352 . 363)) (26015 56995 76517 884000) 0 nil])
([nil nil ((287 . 288) (t 26015 57065 276267 373000)) nil (26015 58109 86882 856000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -351) 352) ((351 . 352)) (26015 56994 629053 925000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -287) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 288) nil (26015 58109 86881 435000) 0 nil])
([nil nil ((351 . 352) (t 26015 56898 962938 130000)) ((#("/" 0 1 (face font-lock-string-face fontified t)) . 351) (undo-tree-id0 . -1) (undo-tree-id1 . -1)) (26015 56993 789728 217000) 0 nil])
([nil current ((#("
;(add-to-list 'company-c-headers-path-system \"/usr/include/c++/13.2.1/\")

;(add-to-list 'company-c-headers-path-system \"/home/wt/Qt/6.6.1/gcc_64/include/\")
" 0 1 (fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 74 (face font-lock-comment-face fontified t) 74 75 (fontified t) 75 76 (face font-lock-comment-delimiter-face fontified t) 76 157 (face font-lock-comment-face fontified t)) . -293) (undo-tree-id0 . -157) (undo-tree-id1 . -157) 450) nil (26015 58109 86876 772000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -339) (undo-tree-id1 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -340) (undo-tree-id3 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -341) (undo-tree-id5 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -342) (undo-tree-id7 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -343) (undo-tree-id9 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -344) (undo-tree-id11 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -345) (undo-tree-id13 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -346) (undo-tree-id15 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -347) (undo-tree-id17 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -348) (undo-tree-id19 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -349) (undo-tree-id21 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -350) (undo-tree-id23 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -351) 352 (t 26015 56900 589604 759000)) ((339 . 352) (t 26015 56909 456271 214000)) (26015 56909 452626 243000) 0 nil])
nil
nil
